import os
import asyncio
import requests
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
import keyboard as kb
from output import print_info

router = Router()


class RequestPars(StatesGroup):
    access_token = State()
    v = State()  # –í–µ—Ä—Å–∏—è API VK
    query = State()  # –ó–∞–ø—Ä–æ—Å
    domain = State()  # –ì—Ä—É–ø–ø–∞ VK
    count = State()  # –ö–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞—á–∫–µ
    offset = State()  # –°–º–µ—â–µ–Ω–∏–µ


def read_domains_from_file():
    domains = []
    file_path = os.path.join(os.path.dirname(__file__), 'domains.txt')
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            domains = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    return domains


@router.message(CommandStart())
async def send_hello_msg(message: Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç!', reply_markup=kb.main)


@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ üìù")
async def get_information(message: Message, state: FSMContext):
    await state.set_state(RequestPars.access_token)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à access token")


@router.message(RequestPars.access_token)
async def get_access_token(message: Message, state: FSMContext):
    await state.update_data(access_token=message.text)
    await state.set_state(RequestPars.v)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é API –í–ö. –ï—ë –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: https://dev.vk.com/ru/reference/versions"
    )


@router.message(RequestPars.v)
async def get_v(message: Message, state: FSMContext):
    await state.update_data(v=float(message.text))
    await state.set_state(RequestPars.query)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")


@router.message(RequestPars.query)
async def get_query(message: Message, state: FSMContext):
    await state.update_data(query=message.text)
    await state.set_state(RequestPars.domain)

    domains = read_domains_from_file()
    await message.answer(
        f'–ù–∞–π–¥–µ–Ω—ã –¥–æ–º–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ: {", ".join(domains)}\n'
        '–ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞',
        reply_markup=kb.send
    )



@router.message(F.text=='–û—Ç–ø—Ä–∞–≤–∏—Ç—å')
async def get_group_id_and_domain(message: Message, state: FSMContext):
    domains = read_domains_from_file()


    if not domains:
        await message.answer("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    data_g = await state.get_data()
    processed_domains = []

    for domain in domains:
        try:
            response = requests.get(
                "https://api.vk.com/method/groups.getById",
                params={
                    "access_token": data_g['access_token'],
                    "v": data_g['v'],
                    "group_id": domain,
                }
            )

            if 'response' not in response.json():
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã {domain}")
                continue

            dom = response.json()['response']['groups'][0]['screen_name']
            processed_domains.append(dom)

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–º–µ–Ω–∞ {domain}: {str(e)}")

    if not processed_domains:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –¥–æ–º–µ–Ω")
        return

    await state.update_data(domains=processed_domains)
    await message.answer(f'üîç –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≥—Ä—É–ø–ø—ã: {", ".join(processed_domains)}')
    await state.set_state(RequestPars.count)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã")


@router.message(RequestPars.count)
async def get_count(message: Message, state: FSMContext):
    await state.update_data(count=int(message.text))
    await state.set_state(RequestPars.offset)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ (–ß—Ç–æ –±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø–∏—à–∏—Ç–µ 0)")


@router.message(RequestPars.offset)
async def get_offset_and_pars(message: Message, state: FSMContext):
    await state.update_data(offset=int(message.text))
    data_req = await state.get_data()
    domains = data_req.get('domains', [])

    if not domains:
        await message.answer("–ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(domains)} –≥—Ä—É–ø–ø...")

    total_posts = 0
    offset = int(data_req['offset'])
    count = int(data_req['count'])
    pachka = 99  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å

    for domain in domains:
        try:
            await message.answer(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä—É–ø–ø—É: {domain}")
            all_posts = []
            current_offset = offset

            while current_offset < count:
                current_count = min(pachka, count - current_offset)

                response = requests.get(
                    'https://api.vk.com/method/wall.search',
                    params={
                        'access_token': str(data_req['access_token']),
                        'v': float(data_req['v']),
                        'query': str(data_req['query']),
                        'domain': domain,
                        'count': current_count,
                        'offset': current_offset,
                    }
                )

                if 'response' not in response.json():
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {domain}")
                    break

                data = response.json()['response']['items']
                all_posts.extend(data)
                current_offset += len(data)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—á–∫–∞–º–∏
                gi = await print_info(data=data)
                for i in range(0, len(gi), 10):
                    batch = gi[i:i + 10]
                    await message.answer('\n'.join(batch))
                    await asyncio.sleep(1)

                await asyncio.sleep(0.3)

            total_posts += len(all_posts)
            await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ {domain} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}")

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {domain}: {str(e)}")

    await message.answer(f"üèÅ –í—Å–µ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_posts}")
    await state.clear()